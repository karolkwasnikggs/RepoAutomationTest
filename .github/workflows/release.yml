name: build-release-sql

on:
  push:
    tags:
      - 'qa-*'
      - 'prod-*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Identify current, previous tag and target range
        id: taginfo
        run: |
          CUR_TAG="${GITHUB_REF#refs/tags/}"
          echo "CURRENT_TAG=$CUR_TAG" >> $GITHUB_ENV

          PREFIX=$(echo "$CUR_TAG" | cut -d'-' -f1)
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV

          if [[ "$PREFIX" == "prod" ]]; then
            QA_TAGS=$(git tag --list 'qa-*' | sort)
            LAST_PROD=$(git tag --list 'prod-*' | sort | grep -v "$CUR_TAG" | tail -1)
            RANGE_START=$LAST_PROD
            RANGE_END=$(echo "$QA_TAGS" | tail -1)
          else
            RANGE_START=$(git tag --list "${PREFIX}-*" | sort | grep -v "$CUR_TAG" | tail -1)
            RANGE_END="HEAD"
          fi

          echo "RANGE_START=$RANGE_START" >> $GITHUB_ENV
          echo "RANGE_END=$RANGE_END" >> $GITHUB_ENV

          if [ -z "$RANGE_START" ]; then
            echo "FIRST_RELEASE=true" >> $GITHUB_ENV
          else
            echo "FIRST_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Build release SQL file
        run: |
          OUTFILE="releases/${CURRENT_TAG}.sql"
          echo "/********************************************/" > "$OUTFILE"
          echo "-- AUTO RELEASE: ${CURRENT_TAG}" >> "$OUTFILE"
          if [ "$FIRST_RELEASE" = "false" ]; then
            echo "-- DIFF: ${RANGE_START} -> ${RANGE_END}" >> "$OUTFILE"
          else
            echo "-- FIRST RELEASE for environment: ${PREFIX}" >> "$OUTFILE"
          fi
          echo "/********************************************/" >> "$OUTFILE"
          echo "" >> "$OUTFILE"

          echo "----------------------------------------------" >> "$OUTFILE"
          echo "-- SECTION: MIGRATIONS (changes/)" >> "$OUTFILE"
          echo "----------------------------------------------" >> "$OUTFILE"

          if [ "$FIRST_RELEASE" = "false" ]; then
            CHANGED_FILES=$(git diff --name-only --diff-filter=AM "$RANGE_START"..."$RANGE_END" -- changes/**/*.sql || true)
          else
            CHANGED_FILES=$(find changes -type f -name "*.sql" || true)
          fi

          for f in $CHANGED_FILES; do
            if [ -f "$f" ]; then
              echo "-- FILE: $f" >> "$OUTFILE"
              echo "" >> "$OUTFILE"
              cat "$f" >> "$OUTFILE"
              echo -e "\n\n" >> "$OUTFILE"
            fi
          done

          echo "----------------------------------------------" >> "$OUTFILE"
          echo "-- SECTION: SCHEMA (FULL if first release)" >> "$OUTFILE"
          echo "----------------------------------------------" >> "$OUTFILE"

          if [ "$FIRST_RELEASE" = "true" ]; then
            for f in $(find schema -type f -name "*.sql" || true); do
              echo "-- SCHEMA OBJECT: $f" >> "$OUTFILE"
              cat "$f" >> "$OUTFILE"
              echo -e "\n\n" >> "$OUTFILE"
            done
          else
            NEW_SCHEMA=$(git diff --name-status "$RANGE_START"..."$RANGE_END" -- schema/**/*.sql | grep '^A' | cut -f2 || true)
            for f in $NEW_SCHEMA; do
              if [ -f "$f" ]; then
                echo "-- NEW OBJECT: $f" >> "$OUTFILE"
                echo "" >> "$OUTFILE"
                cat "$f" >> "$OUTFILE"
                echo -e "\n\n" >> "$OUTFILE"
              fi
            done

            echo "-- MODIFIED OBJECTS (schema/) AS COMMENTS" >> "$OUTFILE"
            MOD_SCHEMA=$(git diff --name-status "$RANGE_START"..."$RANGE_END" -- schema/**/*.sql | grep '^M' | cut -f2 || true)
            for f in $MOD_SCHEMA; do
              echo "-- MODIFIED OBJECT: $f" >> "$OUTFILE"
              echo "-- BEGIN DIFF --------------------------------" >> "$OUTFILE"
              git diff "$RANGE_START"..."$RANGE_END" -- "$f" | sed 's/^/-- /' >> "$OUTFILE"
              echo "-- END DIFF ----------------------------------" >> "$OUTFILE"
              echo -e "\n\n" >> "$OUTFILE"
            done
          fi

      - name: Commit release file to main
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "auto release ${{ env.CURRENT_TAG }}"
          file_pattern: "releases/*.sql"
          branch: main
