name: build-release-sql

on:
  push:
    tags:
      - 'qa-*'
      - 'prod-*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release range
        id: taginfo
        run: |
          CUR_TAG="${GITHUB_REF#refs/tags/}"
          echo "CURRENT_TAG=$CUR_TAG" >> $GITHUB_ENV

          PREFIX=${CUR_TAG%%-*}
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV

          if [[ "$PREFIX" == "prod" ]]; then
            LAST_PROD=$(git tag --list 'prod-*' --sort=creatordate | grep -v "$CUR_TAG" | tail -1)
            LATEST_QA=$(git tag --list 'qa-*' --sort=creatordate | tail -1)
            RANGE_START=${LAST_PROD:-}
            RANGE_END=$LATEST_QA
            echo "RANGE_START=$RANGE_START" >> $GITHUB_ENV
            echo "RANGE_END=$RANGE_END" >> $GITHUB_ENV
          else
            PREV_TAG=$(git tag --list "${PREFIX}-*" --sort=creatordate | grep -v "$CUR_TAG" | tail -1)
            echo "RANGE_START=$PREV_TAG" >> $GITHUB_ENV
            echo "RANGE_END=HEAD" >> $GITHUB_ENV
          fi

      - name: Build release SQL file
        run: |
          OUT=\"releases/${CURRENT_TAG}.sql\"
          echo "/********************************************/" > $OUT
          echo "-- AUTO RELEASE: ${CURRENT_TAG}" >> $OUT
          if [ -n "$RANGE_START" ]; then
            echo "-- RANGE: ${RANGE_START} -> ${RANGE_END}" >> $OUT
          else
            echo "-- FIRST RELEASE for env: ${PREFIX}" >> $OUT
          fi
          echo "/********************************************/" >> $OUT
          echo >> $OUT

          echo "-- SECTION: MIGRATIONS (changes/)" >> $OUT
          if [ -z "$RANGE_START" ]; then
            MIG=$(find changes -type f -name "*.sql" || true)
          elif [[ "$PREFIX" == "prod" ]]; then
            MIG=$(git diff --name-only --diff-filter=ACM "$RANGE_START" "$RANGE_END" -- $(find changes -type f -name "*.sql") || true)
          else
            MIG=$(git diff --name-only --diff-filter=ACM "$RANGE_START"..HEAD -- $(find changes -type f -name "*.sql") || true)
          fi
          for f in $MIG; do
            [ -f "$f" ] && printf "-- FILE: %s\n" "$f" >> $OUT && cat "$f" >> $OUT && echo >> $OUT
          done

          echo "-- SECTION: SCHEMA" >> $OUT
          if [ -z "$RANGE_START" ]; then
            SCH=$(find schema -type f -name "*.sql" || true)
            for f in $SCH; do
              printf "-- SCHEMA OBJECT: %s\n" "$f" >> $OUT
              cat "$f" >> $OUT && echo >> $OUT
            done
          else
            NEW=$(git diff --name-status "$RANGE_START".."$RANGE_END" -- $(find schema -type f -name "*.sql") | grep '^A' | cut -f2 || true)
            MOD=$(git diff --name-status "$RANGE_START".."$RANGE_END" -- $(find schema -type f -name "*.sql") | grep '^M' | cut -f2 || true)
            for f in $NEW; do
              [ -f "$f" ] && printf "-- NEW OBJECT: %s\n" "$f" >> $OUT && cat "$f" >> $OUT && echo >> $OUT
            done
            printf "-- MODIFIED OBJECTS (comments)\n" >> $OUT
            for f in $MOD; do
              printf "-- OBJECT: %s\n" "$f" >> $OUT
              git diff "$RANGE_START".."$RANGE_END" -- "$f" | sed 's/^/-- /' >> $OUT
              echo >> $OUT
            done
          fi

      - name: Commit release file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "auto release ${CURRENT_TAG}"
          file_pattern: "releases/*.sql"
          branch: main
