name: build-release-sql

on:
  push:
    tags:
      - 'qa-*'
      - 'prod-*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Identify current and previous tag
        id: taginfo
        run: |
          CUR_TAG="${GITHUB_REF#refs/tags/}"
          echo "CURRENT_TAG=$CUR_TAG" >> $GITHUB_ENV

          PREFIX=$(echo "$CUR_TAG" | cut -d'-' -f1)
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV

          PREV_TAG=$(git tag --list "${PREFIX}-*" | sort | grep -v "$CUR_TAG" | tail -1)
          echo "PREVIOUS_TAG=$PREV_TAG" >> $GITHUB_ENV

          if [ -z "$PREV_TAG" ]; then
            echo "FIRST_RELEASE=true" >> $GITHUB_ENV
          else
            echo "FIRST_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Build release SQL file
        run: |
          CUR_TAG="${GITHUB_REF#refs/tags/}"
          PREFIX=$(echo "$CUR_TAG" | cut -d'-' -f1)
          OUTFILE="releases/${CUR_TAG}.sql"
          mkdir -p releases

          echo "/********************************************/" > "$OUTFILE"
          echo "-- AUTO RELEASE: ${CUR_TAG}" >> "$OUTFILE"
          echo "/********************************************/" >> "$OUTFILE"
          echo "" >> "$OUTFILE"

          if [[ "$PREFIX" == "qa" ]]; then
            echo "-- QA RELEASE" >> "$OUTFILE"
            echo "-- MIGRATIONS (changes/)" >> "$OUTFILE"

            CHANGED_FILES=$(git diff --name-only "$PREVIOUS_TAG"...HEAD -- 'changes/**/*.sql' 'schema/**/*.sql' || true)

            mkdir -p .releases/qa
            echo "$CHANGED_FILES" > ".releases/qa/${CUR_TAG}.txt"

            for f in $CHANGED_FILES; do
              if [[ "$f" == changes/* && -f "$f" ]]; then
                echo "-- FILE: $f" >> "$OUTFILE"
                echo "" >> "$OUTFILE"
                cat "$f" >> "$OUTFILE"
                echo -e "\n\n" >> "$OUTFILE"
              fi
            done

          elif [[ "$PREFIX" == "prod" ]]; then
            echo "-- PROD RELEASE" >> "$OUTFILE"

            PREV_PROD=$(git tag --list 'prod-*' | sort | grep -v "$CUR_TAG" | tail -1)
            TEMP_LIST=".temp_file_list.txt"
            > "$TEMP_LIST"

            for qa_file in $(ls .releases/qa/*.txt 2>/dev/null | sort); do
              QA_TAG=$(basename "$qa_file" .txt)
              QA_COMMIT=$(git rev-list -n 1 "$QA_TAG")
              if [ -n "$PREV_PROD" ]; then
                PROD_COMMIT=$(git rev-list -n 1 "$PREV_PROD")
                if git merge-base --is-ancestor "$QA_COMMIT" "$PROD_COMMIT"; then
                  continue
                fi
              fi
              cat "$qa_file" >> "$TEMP_LIST"
            done

            sort -u "$TEMP_LIST" > "$TEMP_LIST.uniq"

            while read -r f; do
              if [[ "$f" == changes/* && -f "$f" ]]; then
                echo "-- FILE: $f" >> "$OUTFILE"
                echo "" >> "$OUTFILE"
                cat "$f" >> "$OUTFILE"
                echo -e "\n\n" >> "$OUTFILE"
              fi
            done < "$TEMP_LIST.uniq"

            echo "-- SCHEMA CHANGES" >> "$OUTFILE"
            while read -r f; do
              if [[ "$f" == schema/* && -f "$f" ]]; then
                echo "-- OBJECT: $f" >> "$OUTFILE"
                cat "$f" >> "$OUTFILE"
                echo -e "\n\n" >> "$OUTFILE"
              fi
            done < "$TEMP_LIST.uniq"
          fi

      - name: Commit QA file list if needed
        if: env.PREFIX == 'qa'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "save QA release file list: ${{ env.CURRENT_TAG }}"
          file_pattern: ".releases/qa/*.txt"
          branch: main

      - name: Commit release file to main
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "auto release ${{ env.CURRENT_TAG }}"
          file_pattern: "releases/*.sql"
          branch: main
