name: build-release-sql

on:
  push:
    tags:
      - 'qa-*'
      - 'prod-*'
      - 'preprod-*'
      - 'prepreprod-*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Identify tags and range
        id: taginfo
        run: |
          CUR_TAG="${GITHUB_REF#refs/tags/}"
          echo "CURRENT_TAG=$CUR_TAG" >> $GITHUB_ENV

          PREFIX=${CUR_TAG%%-*}
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV

          if [[ "$PREFIX" == "prod" ]]; then
            LAST_PROD=$(git tag --list 'prod-*' --sort=creatordate | grep -v "$CUR_TAG" | tail -1)
            echo "LAST_PROD=$LAST_PROD" >> $GITHUB_ENV

            # get QA tags after last prod
            if [ -z "$LAST_PROD" ]; then
              QA_TAGS=$(git tag --list 'qa-*' --sort=creatordate)
            else
              QA_TAGS=$(git tag --list 'qa-*' --sort=creatordate | awk -v last="$LAST_PROD" 'found&&/^qa-/{print} $0==last{found=1}')
            fi
            echo "QA_TAGS=$QA_TAGS" >> $GITHUB_ENV

            # prod range uses LAST_PROD and QA_TAGS
            echo "FIRST_RELEASE_PROD=$( [ -z "$QA_TAGS" ] && echo true || echo false )" >> $GITHUB_ENV
          else
            PREV_TAG=$(git tag --list "${PREFIX}-*" --sort=creatordate | grep -v "$CUR_TAG" | tail -1)
            echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV
            echo "FIRST_RELEASE_QA=$( [ -z "$PREV_TAG" ] && echo true || echo false )" >> $GITHUB_ENV
          fi

      - name: Build release SQL file
        run: |
          OUTFILE="releases/${CURRENT_TAG}.sql"
          echo "/********************************************/" > "$OUTFILE"
          echo "-- AUTO RELEASE: ${CURRENT_TAG}" >> "$OUTFILE"
          if [[ "$PREFIX" == "prod" ]]; then
            if [[ "$FIRST_RELEASE_PROD" == "true" ]]; then
              echo "-- FIRST PROD RELEASE" >> "$OUTFILE"
            else
              echo "-- Include QA tags: ${QA_TAGS}" >> "$OUTFILE"
            fi
          else
            if [[ "$FIRST_RELEASE_QA" == "true" ]]; then
              echo "-- FIRST QA RELEASE" >> "$OUTFILE"
            else
              echo "-- DIFF: ${PREV_TAG} -> HEAD" >> "$OUTFILE"
            fi
          fi
          echo "/********************************************/" >> "$OUTFILE"
          echo >> "$OUTFILE"

          echo "-- SECTION: MIGRATIONS (changes/)" >> "$OUTFILE"
          if [[ "$PREFIX" == "prod" && "$FIRST_RELEASE_PROD" == "false" ]]; then
            FILES=""
            for tag in $QA_TAGS; do
              files=$(git diff --name-only --diff-filter=ACM "${LAST_PROD}" "$tag" -- $(find changes -type f -name "*.sql") || true)
              FILES="$FILES $files"
            done
            CHANGED=$(echo "$FILES" | tr ' ' '\n' | sort -u)
          elif [[ "$PREFIX" == "prod" ]]; then
            CHANGED=$(find changes -type f -name "*.sql" || true)
          else
            if [[ "$FIRST_RELEASE_QA" == "true" ]]; then
              CHANGED=$(find changes -type f -name "*.sql" || true)
            else
              CHANGED=$(git diff --name-only --diff-filter=ACM "${PREV_TAG}"..HEAD -- $(find changes -type f -name "*.sql") || true)
            fi
          fi
          for f in $CHANGED; do
            [ -f "$f" ] && printf "-- FILE: %s\n" "$f" >> "$OUTFILE" && cat "$f" >> "$OUTFILE" && printf "\n" >> "$OUTFILE"
          done

          echo "-- SECTION: SCHEMA" >> "$OUTFILE"
          if [[ "$PREFIX" == "qa" && "$FIRST_RELEASE_QA" == "true" ]] || [[ "$PREFIX" == "prod" && "$FIRST_RELEASE_PROD" == "true" ]]; then
            for f in $(find schema -type f -name "*.sql" || true); do
              printf "-- SCHEMA OBJECT: %s\n" "$f" >> "$OUTFILE"
              cat "$f" >> "$OUTFILE"
              printf "\n" >> "$OUTFILE"
            done
          else
            BASE=${PREFIX}
            if [[ "$PREFIX" == "prod" ]]; then
              BASE=${LAST_PROD}
              END_TAG=${LATEST_QA}
            else
              BASE=${PREV_TAG}
              END_TAG=HEAD
            fi
            NEW=$(git diff --name-status "$BASE".."$END_TAG" -- $(find schema -type f -name "*.sql") | grep '^A' | cut -f2)
            MOD=$(git diff --name-status "$BASE".."$END_TAG" -- $(find schema -type f -name "*.sql") | grep '^M' | cut -f2)
            for f in $NEW; do
              [ -f "$f" ] && printf "-- NEW OBJECT: %s\n" "$f" >> "$OUTFILE" && cat "$f" >> "$OUTFILE" && printf "\n" >> "$OUTFILE"
            done
            if [ -n "$MOD" ]; then
              printf "-- MODIFIED OBJECTS (comments)\n" >> "$OUTFILE"
              for f in $MOD; do
                printf "-- OBJECT: %s\n" "$f" >> "$OUTFILE"
                git diff "$BASE".."$END_TAG" -- "$f" | sed 's/^/-- /' >> "$OUTFILE"
                printf "\n" >> "$OUTFILE"
              done
            fi
          fi

      - name: Commit release file to main
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "auto release ${CURRENT_TAG}"
          file_pattern: "releases/*.sql"
          branch: main
